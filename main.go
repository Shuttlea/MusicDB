/*
 * Music info
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"log"
	"log/slog"
	"music_db/config"
	"music_db/db"
	sw "music_db/go"
	"net/http"
	"os"
)

// choose log level (slog.LevelInfo/slog.LevelDebug)
const logLevel = slog.LevelInfo

func main() {
	// logger params
	var addSource bool
	if logLevel == slog.LevelDebug {
		addSource = true
	}
	logger := slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{AddSource: addSource, Level: logLevel}))
	slog.SetDefault(logger)

	// load config
	cfg := config.InitConfig()
	slog.Info("Config loaded", "Parameters", *cfg)

	// database connect
	gormDB := db.ConnectDB(cfg)
	slog.Info("Database connected")
	defer db.CloseDBConnection(gormDB)

	// start server
	router := sw.NewRouter(gormDB,cfg.HostAddr)
	slog.Info("Server started at", "HostAddr", cfg.HostAddr)
	log.Fatal(http.ListenAndServe(cfg.HostAddr, router))
}
