/*
 * Music info
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"gorm.io/gorm"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter(d *gorm.DB,addr string) *mux.Router {
	dbh := dbHandler{d, addr}
	var routes = Routes{
		Route{
			"ChangePost",
			strings.ToUpper("Post"),
			"/change",
			dbh.ChangePost,
		},

		Route{
			"DeleteDelete",
			strings.ToUpper("Delete"),
			"/delete",
			dbh.DeleteDelete,
		},

		Route{
			"InfoGet",
			strings.ToUpper("Get"),
			"/info",
			dbh.InfoGet,
		},

		Route{
			"InfoPost",
			strings.ToUpper("Post"),
			"/info",
			dbh.InfoPost,
		},

		Route{
			"LyricsGet",
			strings.ToUpper("Get"),
			"/lyrics",
			dbh.LyricsGet,
		},

		Route{
			"RootGet",
			strings.ToUpper("Post"),
			"/",
			dbh.RootPost,
		},
	}

	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}
